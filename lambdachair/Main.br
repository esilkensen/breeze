{

ByteArrays = import ByteArrays;
HttpServer = import HttpServer;
HttpSession = import HttpSession;
HTML = import HTML;

port = 8080;

fun route path request cookie server app session = {
  fun loginPage () = {
    HttpServer.Ok
      (ByteArrays.bytesEncodeUTF8
        (Str.stringJoin
          (HTML.serialize
            (`Root
              (`Head [(`Title "Lambda Chair")])
              (`Body
                [(`H1 "Lambda Chair"),
                 (`Form
                   {| action="login"; method="post" |}
                   [(`Label {| for="user" |} "Username:"),
                    (`Input {| type="text"; name="user" |}),
                    (`Input {| type="submit"; val="Login" |})])])))
          "\n"))
  };

  fun homePage idinfo = {
    /* TODO */
    HttpServer.Ok
      (ByteArrays.bytesEncodeUTF8
        (Str.stringJoin
          (HTML.serialize
            (`Root
              (`Head [(`Title "Lambda Chair")])
              (`Body
                [(`H1 "Lambda Chair"),
		 (`H2 ["Welcome, ", idinfo, "!"])])))
          "\n"))
  };

  fun login () = {
    /* TODO */
    case request.parameters.lookup "user" of {
      | `Some user => {
          session.set (`Some user);
	  homePage user
        }
      | `None => {
          loginPage ()
        }
    }
  };

  fun logout () = {
    /* TODO */
    loginPage ()
  };

  case session.get () of {
    | `None => case request.parsed.path of {
        | "/" => loginPage ()
        | "/logout" => loginPage ()
        | "/login" => login ()
        | _ => HttpServer.NotFound
      }
    | `Some idinfo => case request.parsed.path of {
        | "/" => homePage idinfo
        | "/logout" => logout ()
        | _ => HttpServer.NotFound
      }
  }
};

client = ();

HttpSession.runServer port route client;

}
