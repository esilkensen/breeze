{

module LambdaChair
interface
{:
  User = {:
    id : Int;
    username : String;
    prin : Prin;
  :};

  Paper = {:
    id : Int;
    title : String;
    authors : SeqOf String;
    content : String;
    conflicts : SeqOf String;
  :};

  Review = {:
    id : Int;
    paper : Int;
    author : String;
    content : String;
  :};

  addUser : String => Unit;
  addPaper : String => SeqOf String => String => SeqOf String => Unit;
  addReview : Int => String => String => Unit;

  getPaper : Int => OptOf Paper;
  getPapers : Unit => SeqOf Paper;
  getReviews : Int => SeqOf Review;

  loginUser : String => Bool;
  logoutUser : Unit => Unit;
:}
implementation
{|

users = ref public [];
papers = ref public [];
reviews = ref public [];

nextUid = ref public 0;
nextPid = ref public 0;
nextRid = ref public 0;

currentUser = ref public `None;

fun addUser username = {
  p = newPrin username;
  u = {| id={ nextUid := 1 + (!nextUid); (!nextUid) };
         username=username; prin=p.prin |};
  users := (!users) ++ [u];
};

fun addPaper title authors content conflicts = {
  p = {| id={ nextPid := 1 + (!nextPid); (!nextPid) }; title=title;
         authors=authors; content=content; conflicts=conflicts |};
  papers := (!papers) ++ [p];
};

fun addReview paper author content = {
  r = {| id={ nextRid := 1 + (!nextRid); (!nextRid) }; paper=paper;
         author=author; content=content |};
  reviews := (!reviews) ++ [r];
};

fun getUser username = {
  rec fun lookup users = {
    case users of {
      | `Nil => `None
      | `Cons u us =>
          if u.username == username then `Some u else lookup us
    }
  };
  lookup (!users)
};

fun getUsers _ = (!users);

fun getPaper id = {
  rec fun lookup papers = {
    case papers of {
      | `Nil => `None
      | `Cons p ps => if p.id == id then `Some p else lookup ps
    }
  };
  lookup (!papers)
};

fun getPapers _ =  (!papers);

fun getReviews paper = {
  fun canView review = {
    user = contents (!currentUser);
    conflicts = (contents (getPaper review.paper)).conflicts;
    (review.author == user.username) ||
      (not (member (\c => user.username == c) conflicts))
  };
  rec fun lookup reviews ret = {
    case reviews of {
      | `Nil => ret
      | `Cons r rs =>
          lookup rs (if r.paper == paper then ret ++ [r] else ret)
    }
  };
  filter canView (lookup (!reviews) [])
};

fun loginUser username = {
  case (!currentUser) of {
    | `Some u => false
    | `None => {
      case getUser username of {
        | `Some u => {
            currentUser := `Some u; true
	  }
	| `None => false
      }
    }
  }
};

fun logoutUser _ = {
  currentUser := `None
};

|}

}
