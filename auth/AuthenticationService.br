{

open import AsciiArt { (@=) };
open import Tuple { TupleC };

module AuthenticationService
interface
{:
  makeUserRecord : String => String => String => TupleC;

  authenticate :  String => TupleC => (Any => Any => Any) => OptOf PrinRecordC;
:}
implementation
{|
  open import Util { andPrin declassify endorse };

  fun hash {password:String} {salt:String} : String = {
    rec fun convert {s:String} {acc:Int} : Int = {
      d = Str.decompose s;
      if d.empty then acc
      else convert d.rest (((Str.ord d.char) + 10 * acc) `mod` 999991)
    };
    Str.stringOfHEX (convert (Str.concat salt password) 0)
  };

  fun makeUserRecord username password salt = {
    u = newPrin username;
    h = hash password salt;
    lab = (labelOf password `join` labelOf salt) `andPrin` u.prin;
    (salt@lab, h@lab, u)
  };

  fun authenticate password (salt, h, u) cL = {
    fun cAU v' = {
      if (declassify u.pcAuth v' u.prin) then `Some u else `None
    };
    hashLab = labelOf password `join` labelOf salt;
    isCorrect = {
      raiseClrAndPcTo u.clrAuth hashLab;
      h == (hash password salt)
    }@hashLab;
    v = endorse u.pcAuth isCorrect u.prin;
    cL v cAU
  };

|}

}
