{

module Util
interface
{:
  // Given <S, I> and P, return <S /\ P, I /\ P>.
  andPrin : Label => Prin => Label;

  // Given v@<S /\ P, I> and P, return v@<S, I>.
  declassify : Auth => Alpha => Prin => Alpha;
  
  // Given v@<S, I> and P, return v@<S, I /\ P>.
  endorse : Auth => Alpha => Prin => Alpha;
:}
implementation
{|
  fun andPrin lab prin = {
    let (s, _) = reifyLabel (lab `join` secrecyLabel [[prin]]);
    let (_, i) = reifyLabel (lab `meet` integrityLabel [[prin]]);
    fullLabel s i
  };

  fun declassify auth v prin = {
    setLabel auth v (dropPrinSecrecyDown prin (labelOf v))
  };

  fun endorse auth v prin = {
    let (s, _) = reifyLabel (labelOf v);
    let (_, i) = reifyLabel (labelOf v `meet` integrityLabel [[prin]]);
    setLabel auth v (fullLabel s i)
  };
|}

}
