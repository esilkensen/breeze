{

open import AsciiArt { (@=) };

module LoginClient
interface
{:
  loginLabel : Label;
  
  // Update both the pc and clearance by raising the secrecy and
  // lowering the integrity by the given label. For example, if <S, I>
  // is the current pc/clearance and <S', I'> is the input label, then
  // the pc/clearance is set to <S /\ S', I /\ I'>.
  setLoginClrPc : Unit => Unit;
  
  register : String => String => String => Unit;

  login : String => String => ((OptOf PrinRecordC)@=loginLabel);
:}
tests
{
  open LoginClient { loginLabel setLoginClrPc register login };

  fun testLogin {username:String} {password:String} {success:Bool} = {
    result = {
      setLoginClrPc ();
      case login username password of {
        | `Some u => (u.pcAuth <> emptyAuth) && (u.clrAuth <> emptyAuth)
        | `None => false
      }
    }@loginLabel;
    test result ==> success@loginLabel;
  };
  
  register "Iron Man"     "I fear rust!"      "908CA";
  register "Breeze Rider" "Blows my mind..."  "56F2E";
  register "Haskell Fan"  "Gosh, I'm so lazy" "D6830";

  testLogin "Iron Man"     "I fear rust!"       true;
  testLogin "Breeze Rider" "Blows my mind..."   true;
  testLogin "Haskell Fan"  "Gosh, I'm so lazy"  true;
  testLogin "Iron Man"     "I don't fear rust!" false;
  testLogin "The Dude"     ""                   false;
}
implementation
{|
  Map = (import Map) Str.compare;

  open import Util { declassify };
  open import AuthenticationService { makeUserRecord authenticate };

  l = newPrin "L";

  loginLabel = fullLabel [[l.prin]] [[l.prin]];

  fun setLoginClrPc _ = {
    auth = l.pcAuth `with` l.clrAuth;
    raiseClrAndPcBy auth (loginLabel `meet` topBottom);
    setPc auth (getPc () `meet` (loginLabel `join` topBottom));
    lowerClrTo (getClr () `meet` (loginLabel `join` topBottom));
  };
  
  db = {
    setLoginClrPc ();
    ref loginLabel Map.empty
  }@loginLabel;

  fun register username password salt = {
    ignore {
      setLoginClrPc ();
      usr = makeUserRecord username password@loginLabel salt@loginLabel;
      db := Map.add username usr (!db);
    }@loginLabel;
  };

  fun login username password = {
    fun cL v cAU = {
      cAU (declassify l.pcAuth v l.prin)
    };
    setLoginClrPc ();
    case Map.find username (!db) of {
      | `Some usr => authenticate password@loginLabel usr cL
      | `None => `None
    }
  }@loginLabel;

|}

}
