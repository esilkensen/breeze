{

// This module implements User Authentication example from Section 5.2
// in Disjunction Category Labels (Stefan et al. Nordsec '11).
// http://www.scs.stanford.edu/~deian/pubs//stefan:2011:dclabels.pdf

module LoginClient
interface
{:
  // Given a username, password, and salt, create a corresponding record
  // and store it in the database.
  register : String => String => String => Unit;

  // Given a username and password, attempt to authenticate the user and
  // return an OptOf PrinRecordC. If the login is successful, then the
  // clrAuth and pcAuth fields of the PrinRecordC are nonempty, giving the
  // user's granted authority.
  login : String => String => (OptOf PrinRecordC)
:}
tests
{
  open LoginClient { register login };

  fun loginSuccess {username:String} {password:String} : Bool = {
    case (login username password) of {
      | `Some u => (u.pcAuth <> emptyAuth) && (u.clrAuth <> emptyAuth)
      | `None => false
    };
  };
  
  register "Iron Man"     "I fear rust!"      "908CA";
  register "Breeze Rider" "Blows my mind..."  "56F2E";
  register "Haskell Fan"  "Gosh, I'm so lazy" "D6830";

  test loginSuccess "Iron Man"     "I fear rust!"       ==> true;
  test loginSuccess "Breeze Rider" "Blows my mind..."   ==> true;
  test loginSuccess "Haskell Fan"  "Gosh, I'm so lazy"  ==> true;
  test loginSuccess "Iron Man"     "I don't fear rust!" ==> false;
  test loginSuccess "The Dude"     ""                   ==> false;
}
implementation
{|
  open import Util { declassify };
  
  newAuthenticationService = import AuthenticationService;

  l = newPrin "L";

  loginLabel = fullLabel [[l.prin]] [[l.prin]];

  // Update both the pc and clearance by raising the secrecy and lowering
  // the integrity by the login principal L. For example, if <S, I> is the
  // current pc/clearance, then the pc/clearance becomes <S /\ L, I /\ L>.
  fun setLoginClrPc _ = {
    auth = l.pcAuth `with` l.clrAuth;
    // topBottom = <False, False>
    raiseClrAndPcBy auth (loginLabel `meet` topBottom);
    setPc auth (getPc () `meet` (loginLabel `join` topBottom));
    lowerClrTo (getClr () `meet` (loginLabel `join` topBottom));
  };

  open (newAuthenticationService loginLabel setLoginClrPc) {
    addUser authenticate
  };

  fun register username password salt = {
    addUser username password@loginLabel salt@loginLabel
  };

  fun login username password = {
    cL = \v cAU => {
      v' = (declassify l.pcAuth v l.prin);
      lab = labelOf v';
      putStr "pc ==> "; test getPc () ==> ?;    // <L, L>
      putStr "vLab ==> "; test labelOf v ==> ?; //
      putStr "lab ==> "; test lab ==> ?;        // <U, U /\ L>
      putStr "clr ==> "; test getClr () ==> ?;  // <L, L>
      test getPc () `below` lab ==> ?;
      cAU true@lab // malicious cL
    };
    result = authenticate username password@loginLabel cL;
    (declassify l.pcAuth result l.prin)@public
  };
|}

}
