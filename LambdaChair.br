{

// A Breeze version of the Lambda Chair example from the LIO library.
// https://github.com/scslab/lio/tree/master/lio/examples/LambdaChair

open import Str { Printf };
open import LIORef { newLIORef readLIORef writeLIORef labelOfLIORef };

module LambdaChair
interface
{:
  // System administrator interface
  addPaper : String => String => Int;
  addUser : String => String => Unit;
  addAssignment : String => Int => Unit;
  addConflict : String => Int => Unit;
  asUser : String => (Unit => Unit) => Unit;

  // Reviewer interface
  findPaper : String => Int;
  readPaper : Int => Unit;
  readReview : Int => Unit;
  appendToReview : Int => String => Unit;
:}
implementation 
{|

// pc and clearance start out at "bottom"
f = newPrin "False";
bottom' = integrityLabel [[f.prin]];
lowerPcTo f.pcAuth bottom';
lowerClrTo bottom';

reviewEntries = ref bottom' [];
users = ref bottom' [];
currentUser = ref bottom' `None;

paperPrins = ref bottom' [];
reviewPrins = ref bottom' [];

rec fun listRef lst ind = {
  case lst of {
    | `Nil => `None
    | `Cons x xs => if ind == 0 then `Some x else listRef xs (ind - 1)
  }
};

fun paperLabel id = {
  case (listRef (!paperPrins) (id - 1)) of {
    | `None => mkNav "Paper not found"
    | `Some p => bottom' `join` (fullLabel [] [[p.prin]])
  }
};

fun reviewLabel id = {
  case (listRef (!reviewPrins) (id - 1)) of {
    | `None => mkNav "Paper not found"
    | `Some r => bottom' `join` (fullLabel [[r.prin]] [[r.prin]])
  }
};

fun newReviewEnt id title content = {
  p = newPrin (Printf.sprintf "P%d" id);
  r = newPrin (Printf.sprintf "R%d" id);
  paperPrins := (!paperPrins) ++ [p];
  reviewPrins := (!reviewPrins) ++ [r];

  // raise clearance to the new "top"
  prins = (!paperPrins) ++ (!reviewPrins);
  auth = foldl with f.clrAuth (map (\l => l.clrAuth) prins);
  clr = (paperLabel id) `join` (reviewLabel id);
  raiseClrTo auth ((getClr ()) `join` clr);

  paper = newLIORef (paperLabel id) content;
  review = newLIORef (reviewLabel id) "";
  {| paperId = id; paperTitle = title; paper = paper; review = review; |};
};

fun newUser name password = {
  {| name = name; password = password; conflicts = []; assignments = [] |}
};

fun findUser name = {
  rec fun find name users = {
    case users of {
      | `Nil => `None
      | `Cons u us => if u.name == name
                      then `Some u
                      else find name us
    }
  };
  find name (!users)
};

fun findReview id = {
  rec fun find id reviews = {
    case reviews of {
      | `Nil => `None
      | `Cons r rs => if r.paperId == id
                      then `Some r
                      else find id rs
    }
  };
  find id (!reviewEntries)
};

fun findPaperId title = {
  rec fun find title reviews = {
    case reviews of {
      | `Nil => `None
      | `Cons r rs => if r.paperTitle == title
                      then `Some r.paperId
                      else find title rs
    }
  };
  find title (!reviewEntries)
};

rec fun replaceUser user users = {
  case users of {
    | `Nil => `Nil
    | `Cons u us => if u.name == user.name
                    then user :: users
                    else u :: (replaceUser user us)
  }
};

// System administrator interface //////////////////////////////////////////////

fun addPaper title content = {
  id = 1 + length (!reviewEntries);
  ent = newReviewEnt id title content;
  reviewEntries := ent :: (!reviewEntries);
  id
};

fun addUser name password = {
  case findUser name of {
    | `None => users := (newUser name password) :: (!users)
    | `Some u => mkNav "User already exists"
  }
};

fun addAssignment name id = {
  case findUser name of {
    | `None => mkNav "User not found"
    | `Some u => if (member (\x => x == id) u.conflicts)
                 then mkNav "User in conflict with paper"
                 else users := replaceUser {|
                                   name = u.name;
                                   password = u.password;
                                   conflicts = u.conflicts;
                                   assignments = id :: u.assignments
                                 |} (!users)
  }
};

fun addConflict name id = {
  case findUser name of {
    | `None => mkNav "User not found"
    | `Some u => if (member (\x => x == id) u.assignments)
                 then mkNav "User assigned to paper"
                 else users := replaceUser {|
                                   name = u.name;
                                   password = u.password;
                                   conflicts = id :: u.conflicts;
                                   assignments = u.assignments
                                 |} (!users)
  }
};

fun asUser name mainReview = {
  putStr (Printf.sprintf "asUser \"%s\"\n" name);
  currentUser := contents (findUser name);
  rs = map (\id => contents (listRef (!reviewPrins) (id - 1)))
           (sort (\x y => x < y) (!currentUser).assignments);
  userPc = bottom' `join` (fullLabel [] (map (\r => [r.prin]) rs));
  raisePcTo userPc; // (True, R1 /\ ... /\ Rn)
  mainReview ();
  auth = foldl with f.pcAuth (map (\r => r.pcAuth) (!reviewPrins));
  lowerPcTo auth bottom';
  currentUser := `None
};

// Reviewer interface //////////////////////////////////////////////////////////

fun findPaper title = {
  putStr (Printf.sprintf "findPaper \"%s\"\n" title);
  case findPaperId title of {
    | `None => mkNav "Paper not found"
    | `Some id => id
  }
};

fun readPaper id = {
  putStr (Printf.sprintf "readPaper %d\n" id);
  case findReview id of {
    | `None => mkNav "Paper not found"
    | `Some r => {
        lab = (getPc ()) `join` (labelOfLIORef r.paper);
        _ = { readLIORef r.paper }@lab;
        ()
      }
  }
};

fun readReview id = {
  putStr (Printf.sprintf "readReview %d\n" id);
  case findReview id of {
    | `None => mkNav "Review not found"
    | `Some r => {
        s = readLIORef r.review;
	putStr (Printf.sprintf "    review ==> \"%s\"\n" s);
	// TODO: write to labeled output channel
	()
      }
  }
};

fun appendToReview id rev = {
  putStr (Printf.sprintf "appendToReview %d \"%s\"\n" id rev);
  case findReview id of {
    | `None => mkNav "Review not found"
    | `Some r => {
	lab = (getPc ()) `join` (labelOfLIORef r.review);
        s = { readLIORef r.review }@lab;
	writeLIORef r.review (Printf.sprintf "%s|%s" s rev);
      }
  }
};

|}

}
